Feature

-----------------------------------------------
 Crash-consistent snapshot of glusterfs volumes
-----------------------------------------------

1 Summary

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Currently the design is to support only crash-consistent snaps of glusterfs volumes. This guarantees that any snap taken will have data which was sync'd from the client side. All other data, can/cannot exist on the snap.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2 Owners

-----------------------------------------------
 Effort driven by: Amar Tumballi, Doug Willams.
 LVM/glusterfs: Shishir Gowda
 Barriering/RPC: Raghavendra G
 CLI/Glusterd: Krishnan P, Kaushal M
-----------------------------------------------

3 Current status

----------------------------------------------------
 No support availabe for snap'ing a glusterfs volume
----------------------------------------------------

4 Detailed Description

-------------------------------------------------------------------------------
  Barrier mechanism to support crash consistency/recover-ability for snapshots.
-------------------------------------------------------------------------------

---------------------------------------------------------------------------------------
  With snapshot, we aim to provide support only for crash recover-ability. Tnis
  would require applications also be aware of such scenarios(open with O_DIRECT/O_SYNC,
  call fsync() periodically,etc..)
---------------------------------------------------------------------------------------

-------------------------------------------------------------------------------
  a. The snap is on the trusted storage pool, and not dependent on the clients.
     The view would be of a single thread on a single client.
-------------------------------------------------------------------------------

-----------------------------------------------------------------------------------
  b. Application which have gotten ack for sync() are guaranteed to have all writes
     made before the sync() to be available in the snap
-----------------------------------------------------------------------------------

-------------------------------------------------------------------------------------
  c. Any writes acknowledged after sync, but before snap may or may  not be available
     in the snap
-------------------------------------------------------------------------------------

-------------------------------------------------------------------------
  d. Any write done after sync, after snap would never end up on the snap
-------------------------------------------------------------------------

e.g

-------------------------------------------------------------------
   Timeline ->
   writeA..writeB..sync..writeC..writeD..snap..sync..writeE..writeD
-------------------------------------------------------------------

----------------------------------------
   In the above scenario snap:
   Guaranteed to contain: writeA, writeB
   May contain: writeC, writeD
   Never contain: writeE, writeD
----------------------------------------

---------------------------------------------------------------------------
  e. Few of the barrier class ops are (Complete list of ops to follow soon)
     * create/mknod
     * link/unlink
     * rename
     * remove
     * link/unlink
     * mkdir
     * rmdir
---------------------------------------------------------------------------

 +
 5 Benefit to GlusterFS

---------------------------------------------------------------
 Snapshot of glusterfs volume allows users to
   a. A point in time checkpoint from which to recover/failback
   b. Allow read-only snaps to be the source of backups.
---------------------------------------------------------------

 +
 6. Scope

6.1. Nature of proposed change

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  The above changes does not require any additional xlator, but can be achieved by making changes to cli, glusterd and server protocol. Additional lvm support will be through external scripts
 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

6.2. Implications on manageability

----------------------------------
  Glusterd would now need 3 stages
----------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  a. 1st stage(Prepare): Prepare bricks for snap. Start barrier-ing on bricks. Handle acks. This can be triggered by a volume set option which inturn re-configures all the bricks of the volume
  b. 2nd stage(Snap): If acks from 1 failed, fail snap. Else Issue snap commands to
     start lvm snap of each bricks. Handle acks. We plan to have this as a external script invoked from the glusterd. This would need an additional command implementation in glusterd
  c. 3rd stage(Resume): If acks failed from 2, remove snaps and remove barrier. Else just
     remove barrier. This can again be achieved by using volume set command
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  CLI changes:
  The cli will drive the snap command. We plan to make use of cli/glusterd syncop command issuing features to start/control the 3 stages (barrier,snap,unbarrier). The glusterd will have information stored from which it can recover a snap operation.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 +
 6.7. Implications on 'glusterd'

-----------
  Lvm snap:
-----------

------------------------------------------------------------------------------------
  Bring in mechanisms for snapping of bricks. Explore possibilities to snap based on
  user provided name, or time-stamp from master glusterd(initiator)
------------------------------------------------------------------------------------

-------------------------------
  Backup (recovery) from snaps:
-------------------------------

--------------------------------------------------------------------------
  Provide mechanisms to create volfiles based on these snaps, for apps to 
  be able to mount and recover data from crashes if any, or backup the 
  volume using all the snapshots at the same time. Mostly the mounts 
  should be read-only.
--------------------------------------------------------------------------

--------------------------
  Management of Snapshots:
--------------------------

---------------------------------------------------------------------------
  As we support creating of snapshots, we also would need need to delete a 
  snapshot, collapse a snapshot etc etc...
---------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  A directory named snap will be created under the vol directory (..../glusterd/vols/<volname>/snap). Under which each created snap will be a self contained directory with meta files, and snap volumes
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

7 Implications to glusterfs

----------------------------------------------------------------
  Glusterfs changes to support crash consistency/recover-ability
----------------------------------------------------------------

-----------------------------------------------------------------------------
  a. Distribute xlator: Rename of directories as of today is not recoverable.
     Suggested approach to tackle this problem is bringing additional xattrs
     to be used provide means to identify/checkpoint a rename operation from
     which we can recover in case of a crash.
-----------------------------------------------------------------------------

---------------------------------------------------------------------------------
  b. Marker: xtime updates happen after changes to the files. If there is a crash
     before xtime update, it might be lost till another op happens to update the
     xtime. Better approach would be to update xtime, and then perform the ops.
     In case only xtime is updated, it would mean a additional crawl with noops
---------------------------------------------------------------------------------

 +
 8 User Experience

---------------------------------------------------------------------
 The suggested cli interfaces are:
 "gluster volume snap <volname> <create|destory|list|> <snap-naming>"
 lvm chunk-size can be a configurable option (default is 64KB)
---------------------------------------------------------------------

9 Documentation

--------------------------------
 <Documentation for the feature>
--------------------------------

10 Status

-----------------------------------------
 Design discussions are still in progress
-----------------------------------------

 +
 11 Comments and Discussion

--------------
 <Follow here>
--------------

----------------------------------------------------------------------------------------
 Please, do not use the LVM snapshot approach, as it is unfeasible at production loads. 
 Each snapshot introduce incremental write delay.
 ZFS snapshots do not introduce noticeable delays. Andre Felipe Machado
----------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Snapshot with traditional LVM can be an issue at production, but dm-thin support in LVM userspace (LVM2) should address the snapshot limitation. lvcreate --thin supports creation of thin LVs from thin pools.
 --Bharata March 12, 2013
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
