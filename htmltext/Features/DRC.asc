Contents
~~~~~~~~

* link:#Feature[1 Feature]
** link:#Summary[1.1 Summary]
** link:#Owners[1.2 Owners]
** link:#Current_status[1.3 Current status]
** link:#Detailed_Description[1.4 Detailed Description]
** link:#Benefit_to_GlusterFS[1.5 Benefit to GlusterFS]
** link:#Scope[1.6 Scope]
*** link:#1._Nature_of_proposed_change[1.6.1 1. Nature of proposed
change]
*** link:#2._Implications_on_manageability[1.6.2 2. Implications on
manageability]
*** link:#3._Implications_on_presentation_layer[1.6.3 3. Implications on
presentation layer]
*** link:#4._Implications_on_persistence_layer[1.6.4 4. Implications on
persistence layer]
*** link:#5._Implications_on_.27GlusterFS.27_backend[1.6.5 5.
Implications on 'GlusterFS' backend]
*** link:#6._Modification_to_GlusterFS_metadata[1.6.6 6. Modification to
GlusterFS metadata]
*** link:#7._Implications_on_.27glusterd.27[1.6.7 7. Implications on
'glusterd']
** link:#How_To_Test[1.7 How To Test]
** link:#User_Experience[1.8 User Experience]
** link:#Dependencies[1.9 Dependencies]
** link:#Documentation[1.10 Documentation]
** link:#Status[1.11 Status]
** link:#Comments_and_Discussion[1.12 Comments and Discussion]

Feature
-------

Duplicate Request Cache (DRC)

Summary
~~~~~~~

Avoid processing client retransmits of non-idempotent operations.

Owners
~~~~~~

Rajesh Amaravathi <rajesh@redhat.com>

Current status
~~~~~~~~~~~~~~

Currently, there is no implementation of DRC in GlusterFS

Detailed Description
~~~~~~~~~~~~~~~~~~~~

Idempotent operation is one where the same request can be safely
repeated, E.g: Read, stat, lookup. Non-idempotent operations can succeed
only once. E.g: Write, Rename, Unlink, Create. In case where
non-idempotent operations are retransmitted due to network error, etc,
the processing of the duplicate request can be unsuccessful at the
least, and disastrous at worst (think truncates), leading to data
loss/corruption. To avoid such duplicate processing of the same request,
we need to cache the rpc requests and their replies so that we can send
the cached reply back to the client instead of reprocessing it.

Benefit to GlusterFS
~~~~~~~~~~~~~~~~~~~~

This feature adds resilience to rpc retansmissions of non-idempotent
operations in NFS (for now).

Scope
~~~~~

1. Nature of proposed change
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Proposed implementation mostly involves modifications to rpc code.

2. Implications on manageability
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This change should be transparent to non-server xlators. The server-type
xlators like nfs and protocol/server should have separate initialization
and volume set hooks.

3. Implications on presentation layer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

None.

4. Implications on persistence layer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

None.

5. Implications on 'GlusterFS' backend
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

None.

6. Modification to GlusterFS metadata
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

May need to have internal hidden files for persistence and cluster
awareness capabilities[future features].

7. Implications on 'glusterd'
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Some options for configuration of DRC will be added to glusterd/cli.

How To Test
~~~~~~~~~~~

Need to induce rpc retransmissions artificially to test this feature.
One can use gdb for testing, or tcpdump and other software which have
the capability to re-transmit rpc requests at will.

User Experience
~~~~~~~~~~~~~~~

None.

Dependencies
~~~~~~~~~~~~

None.

Documentation
~~~~~~~~~~~~~

There's very little documentation on the web regarding DRC. Current
open-source implementations(e.g, linux kernel) are good starting points.

Status
~~~~~~

Patch ready, waiting for review.

Comments and Discussion
~~~~~~~~~~~~~~~~~~~~~~~

On devel mailing lists.
