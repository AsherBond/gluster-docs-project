Contents
~~~~~~~~

* link:#Governance_Overview[1 Governance Overview]
* link:#Becoming_a_contributing_member[2 Becoming a contributing member]
** link:#Contributing_to_a_project[2.1 Contributing to a project]
** link:#Working_toward_membership[2.2 Working toward membership]
** link:#Responsibilities[2.3 Responsibilities]
** link:#Adding_to_the_discussions_and_contributing_code[2.4 Adding to
the discussions and contributing code]
** link:#Large_projects[2.5 Large projects]
* link:#Voting[3 Voting]
** link:#Binding_Votes[3.1 Binding Votes]
** #Expressing_Votes:_.2B1.2C_0.2C_-1[3.2 Expressing Votes: +1, 0, -1]
** link:#Votes_on_Code_Modification[3.3 Votes on Code Modification]
** link:#Who_can_vote.2C_which_votes_count.3F[3.4 Who can vote, which
votes count?]
** link:#Votes_on_Releases[3.5 Votes on Releases]
** link:#Vetoes[3.6 Vetoes]
** link:#Consensus_Gauging_through_Silence[3.7 Consensus Gauging through
Silence]
** link:#Reasons_for_Votes[3.8 Reasons for Votes]
** link:#Large_Projects_2[3.9 Large Projects]
* link:#Adding_a_Project[4 Adding a Project]
**
#Each_project_must_agree_to_support_the_Gluster_complete_stack_.28CS.29_release_schedule:[4.1
Each project must agree to support the Gluster complete stack (CS)
release schedule:]
**
#Each_project_must_agree_to_provide_or_integrate_with_one_of_the_published_APIs:[4.2
Each project must agree to provide or integrate with one of the
published APIs:]
** link:#Gluster_Project_Acceptance_Policy[4.3 Gluster Project
Acceptance Policy]
*** #Process:[4.3.1 Process:]
* link:#Project_Maturity[5 Project Maturity]
** link:#Indications_of_a_Healthy_Project[5.1 Indications of a Healthy
Project]
* link:#Gluster_Board[6 Gluster Board]
** link:#Expectations_of_Board_Members[6.1 Expectations of Board
Members]
** link:#Membership_Criteria[6.2 Membership Criteria]
** link:#Terms_and_Elections[6.3 Terms and Elections]
** link:#Meetings[6.4 Meetings]
** link:#Board_Voting[6.5 Board Voting]
*** link:#Initial_Gluster_Board_Members[6.5.1 Initial Gluster Board
Members]
* link:#Releases_and_release_management[7 Releases and release
management]

Governance Overview
-------------------

GlusterFS is an *open* *source* distributed storage project, *openly*
*governed* by the Gluster community. The Gluster community strives to
take the best and learn from many communities. Individual status,
whether being voted onto the board or voted onto a project, is
determined through merit concepts taken from the
http://apache.org/[Apache]http://apache.org/[Software]http://apache.org/[Foundation].
The board and composition is modeled after the Apache member section.

Gluster’s goal is deliver a complete and comprehensive open data
platform. In order for the Gluster community to function well, the
ability to integrate with, incubate and coordinate many related projects
to build a single platform is essential, with the highly successful
Eclipse project as an example. In addition, the initial board
composition and defining strategic supporter methodology has been
derived from Eclipse.

Input and concepts have been used from oVirt, LVM and many other
existing and well functioning Linux communities. We welcome you to join
the Gluster Community and come add your experience, know how, and
complementary assets to create a truly open data platform.

Becoming a contributing member
------------------------------

'Member' is a term used to identify someone who is committed to a
particular project and who has been voted/invited to be part of the core
group within the project that ensures the project’s vitality.

One thing that is sometimes mystifying to those new to the open
development process is that we value the community in addition to the
code. A strong and healthy community will be a respectful, productive
and rewarding place. Strong code and projects will evolve.

Contributing to a project
~~~~~~~~~~~~~~~~~~~~~~~~~

The first step in becoming a member is quality contributions to the
project. Contributions to Gluster include the following:

* Community – one must interact with others, sharing vision and
knowledge
* Vision – a clear vision and consensus is needed
* Documentation – without it, the stuff remains only in the minds of the
authors
* Code – discussion goes nowhere without code

Once an individual has established a track record of quality
contributions to Gluster over a period of time, they are well on the way
to membership.

Working toward membership
~~~~~~~~~~~~~~~~~~~~~~~~~

A member is voted onto a project based on substantial contribution to,
understanding of, and duration of the commitment to the project.

The current set of members vote additional members onto the project. If
the project has fewer than 3 members the vote is ratified by the Gluster
board. Members can be voted onto the project at any time.

Gluster does not exclusively require code contribution to become a
member; documentation, community work, ie. web work, build systems,
running meetups and events, release management, or any devoted and
valuable activity, is counted when someone is considered for inclusion
in the project or board. Anyone who is supportive of the community and
works in any contributing areas is a likely candidate for membership.

Gluster is a meritocracy. That is, once someone has contributed
sufficiently to any area they can be considered for membership. Being a
member does not mean you only commit code, it means you are committed to
the project.

It is expected that if you earned your membership by submitting
documentation, for example, that you don’t acknowledge patches until you
have also earned your stripes in that regard. The general rule is to
defer to an ‘expert’ in an area until you become one. It is possible to
be voted into one project and not another based on your areas of
influence.

One of the key contributions people can make to the community is through
the support of a wide user base by assisting users on the user list,
writing user oriented docs and ensuring the user viewpoint is understood
by all developers. A central idea behind being a member is the ability
to mentor others and work cooperatively with your peers.

Responsibilities
~~~~~~~~~~~~~~~~

Working on a Gluster project(s) should be rewarding. As a Gluster
member, you do as much work as you can. You do not need to participate
in every discussion, just because it concerns the project. Neither do
you need to participate in every vote or in every development issue. We
like people to be involved and we reward contributions (meritocracy),
but we do not punish a lack of contributions. People's contribution
level changes as their needs change and we adapt to those changes.

You do, however, have a responsibility as a member to consider “what is
the best thing for the project?” in your actions when voting and
furthering the development of the project.

Adding to the discussions and contributing code
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Discussion leads to a clearer community understanding of the project’s
goals and objectives and also of how the community works.

Of course, there needs to be a balance between too much chat and not
enough code. If something is easy to do in code and does not impact the
overall product (such as a bug fix) then just go ahead and do it.
However, if something is to introduce a new feature, then it is best to
introduce your idea to the community via an email to the dev mail list
first. In this introduction you should outline why you want to do
something, how you propose to do it and ask for comments. Any comments
received will help to fine tune the design and, in many cases, produce a
quicker, more elegant solution (this is the benefit of many eyes on a
solution).

The absence of comments from others does not mean it is not a good idea.
In fact the reverse is true - it means nobody has any objection or
anything to add. It is only if people respond that you need to discuss
further. Once the discussion reaches consensus then coding can commence
or accelerate. Once you have implicit or explicit approval for your
contribution, go ahead and do it. Be sure to document what you have done
in the process.

Online discussion is important for community building. Offline
discussion and one-to-one conversations deny the community the chance to
become involved and lead to solutions that are not ideal. So please do
as much discussion as possible on the devel or user mailing list.

It is good practice to post any relevant IRC/IM etc conversations on a
topic back to the mailing list. Just cut and paste the relevant
section(s).

Large projects
~~~~~~~~~~~~~~

Once a project is well established and has a diverse member base it may
publish more detailed criteria for becoming a member. The idea behind
this is that certain attributes may be more valuable to some projects
than to others. For example, the GlusterFS core project may value
documentation more whereas individual translator projects may value code
contributions and API compatibility most highly. Or perhaps to become a
member you need to demonstrate your ability to maintain a compatible
ABI. Each projects needs and requirements will differ. This allows
projects that are diverse and established to create their own culture
and identity.

Voting
------

Because one of the fundamental aspects of accomplishing things within
the Gluster Community is building consensus, we need to be able to know
when consensus has been reached. This is done by voting.

There are essentially three types of vote:

* Code modifications
* Package releases
* Procedural

Votes on procedural issues follow the common format of majority rule,
unless otherwise stated. That is, if there are more favorable votes than
unfavorable ones, the issue is considered to have passed - regardless of
the number of votes in each category (If the number of votes seems too
small to be representative of a community consensus, the issue is
typically not pursued. However, see the description of lazy consensus
for a modifying factor.)

Votes on code modifications follow a different model. In this scenario,
a negative vote constitutes a veto, which cannot be overridden. Again,
this model may be modified by a lazy consensus declaration when the
request for a vote is raised, but the full-stop nature of a negative
vote is unchanged. Under normal (non-lazy consensus) conditions, the
proposal requires three positive votes and no negative ones in order to
pass; if it fails to garner the requisite amount of support, it doesn’t
— and typically is either withdrawn, modified, or simply allowed to
languish as an open issue until someone gets around to removing it.

Votes on whether a project, or the rolled-up Gluster release is ready to
be released or not use yet a different mechanism: are there at least
three binding votes in favor of the release? See more about this below.

Binding Votes
~~~~~~~~~~~~~

Who is permitted to vote is, to some extent, a community-specific thing.
However, anyone contributing to the project can weigh in. Only votes
from project members and board members need to be considered in the
official vote count. However, it is good form to discuss any feedback
from anyone that has taken the time to weigh in on the vote. The goal
here is to encourage participation and expand the number of members.
Participating in the process is one of the best ways to do that.

That’s the general rule, but the process can be looser, and procedural
votes from developers or patch submitters are sometimes considered
binding if the voter has acquired enough merit and respect in the
community.

A vote carries some responsibilities that may not be immediately
obvious. For example, in some cases a favorable vote carries the implied
message ‘I approve and I’m willing to help.’ Also, an unfavorable vote
may imply that ‘I disapprove, but I have an alternative and will help
with that alternative.’ A -1 has to be justified, and if the
justification can not hold up to debate it must be withdrawn. The idea
here is to prevent any political agenda, but rather allow debate on
technical or project merit. In no case may someone’s vote be considered
invalid if the implied commitment doesn’t appear to be met; a vote is a
formal expression of opinion, not of commitment.

If the R-T-C policy is in effect, a positive vote carries the very
strong implied message, ‘I have reviewed/tested this patch myself, and
found it good.’ Similarly, a negative vote usually means that the patch
was tested and found to be not good, although the veto (such that it is
in this case) may be based on other technical grounds.

A guideline for reviewing patches (+1 for a patch):

* The patch make sense
* The patch follows the project standards (e.g. code format)
* The patch takes into account the different aspects/components of the
project
* The patch does not change any core behavior or introduce new concepts
that were not discussed in the mailing list beforehand.
* I’m sufficiently satisfied that the patch is good.

Expressing Votes: +1, 0, -1
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The voting process in Gluster may seem more than a little weird if
you’ve never encountered it before. Votes are represented as numbers
between -1 and +1, with ‘-1′ meaning ‘no’ and ‘+1′ meaning ‘yes.’
_(Taken from Apache)_

 +
 Votes should be permitted to run for at least 72 hours for major items
to provide an opportunity for all concerned persons to participate,
regardless of their geographic locations.

Votes on Code Modification
~~~~~~~~~~~~~~~~~~~~~~~~~~

Dev patches can be ‘acked’ and acted on quickly. The idea is, however,
to provide enough time for review.

For code-modification votes, +1 votes are in favor of the proposal, but
-1 votes are vetoes and kill the proposal dead until all vetoers
withdraw their -1 votes. Single acks can be adopted by a project if
explicitly stated so. More acks can be requested for patches requiring a
more careful review.

Unless a vote has been declared as using lazy consensus , three +1 votes
are required for a pass.

Who can vote, which votes count?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Anyone on the project can vote, to voice an opinion. However, only votes
by the Gluster board and the project members are considered binding
(counted) in the vote conclusion. Voting by the greater community is
encouraged so that the Gluster board and project members attain a
greater understanding of community consensus, but votes with no
justification will be ignored.

If a project has less than 3 members, it needs its votes on releases,
procedural issues, and including adding new members ratified by the
Gluster board. The goal is for each project to eventually have more than
3 members.

Votes on Releases
~~~~~~~~~~~~~~~~~

Votes on whether a Gluster project is ready for release follow a format
similar to majority approval, except that the decision is officially
determined solely by whether at least three +1 votes were registered.
Releases may not be vetoed. Generally the community will table the vote
to release if anyone identifies serious problems, but in most cases the
ultimate decision, once three or more positive votes have been garnered,
lies with the individual serving as release manager. The specifics of
the process may vary from project to project, but the ‘minimum of three
+1 votes’ rule is universal.

Vetoes
~~~~~~

A code-modification proposal may be stopped dead in its tracks by a -1
vote by a qualified voter. This constitutes a veto, and it cannot be
overruled nor overridden by anyone. Vetoes stand until and unless
withdrawn by their casters.

To prevent vetoes from being used capriciously, they must be accompanied
by a technical justification showing why the change is bad (opens a
security exposure, negatively affects performance, etc. ). A veto
without a justification is invalid and has no weight.

Consensus Gauging through Silence
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An alternative to voting to measure the acceptability of something is
the concept known as 'lazy consensus.'

Lazy consensus is simply an announcement of ‘silence gives assent.’ When
someone wants to determine the sense of the community this way, it might
do so with a mail message such as:

_“The patch below fixes bug #1234567; if no-one objects within three
days, I’ll commit it.”_

Lazy consensus cannot be applied to code changes when the
review-then-commit policy is in effect.

Reasons for Votes
~~~~~~~~~~~~~~~~~

People tend to avoid conflict and thrash around looking for something to
substitute - somebody in charge, a rule, a process, or stagnation. None
of these tend to be very good substitutes for doing the hard work of
resolving the conflict.

Large Projects
~~~~~~~~~~~~~~

A project that has an established track record and diverse member pool
may wish to lobby the board to continue using their own voting rules as
long as the project publishes them and the project maintains a diverse
membership. The board may accept or reject this effort at its
discretion, subject to a majority vote.

Adding a Project
----------------

One of the key goals of Gluster is to deliver both a cohesive
distributed storage stack and related components for storage management
and to do this on a well-defined schedule. This means that each project
can be quite autonomous in terms of development and project release
schedules, although some coordination needs to be achieved in order to
meet the goal of providing a usable release on a well defined schedule.

Each project must agree to support the Gluster complete stack (CS)
release schedule:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

A project may do so by sync’ing its release schedule with the Gluster CS
release schedule. It may use any prior release and add fixes/patches to
resolve integration issues, do a custom build, or some other scheme. The
key here is that the project is aware of the Gluster CS release schedule
and has a concrete plan in place to help make that release meet
deadlines and be successful.

Each project must agree to provide or integrate with one of the
published APIs:
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

In order to release a cohesive stack, everything needs to work together.
The core of this is the GlusterFS core project. If a new project is
started it needs to integrate with a published API, or an additional API
needs to be created in the GlusterFS core project to support the new
project. Finally, additional APIs can come into scope to provide
facilities/capabilities that the GlusterFS core consumes. The board
signs off on which projects provide APIs to make sure there is
coordination between the projects. The board is not responsible for the
technical aspects of the APIs, just the facilitation when named API
projects are added or removed. In order to coordinate and facilitate
cross project architecture and schedule issues the
mailto:gluster-devel@gluster.org[gluster-devel@gluster.org] list is
used.

_The key is that all projects in some or other way need to be integrated
with the engine, either directly, indirectly by providing services to
it, exposing, or extending it. In addition the board my vote to include
additional projects that are complementary to the Gluster Community on a
case by case basis._

If you would like to start a new project in Gluster, or contribute to an
existing project in Gluster, please mail
mailto:board@oVirt.org[mailto:board@]mailto:board@oVirt.org[gl]mailto:board@oVirt.org[uster]mailto:board@oVirt.org[.org]

Gluster Project Acceptance Policy
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The Gluster Board has realized that for Gluster to be truly successful,
the quality and health of its associated projects must be extremely
high. However, Gluster also realizes the need to have a low “barrier to
entry” for new projects as well as a streamlined approach for accepting
new projects.

Re-using guidelines from the “tried and true” operation of the Apache
Software Foundation (ASF), Gluster is enacting an Incubation process
based on the ASF Incubator project; for more detailed information about
Apache and the Incubator, please see:

http://www.apache.org/[http://www.apache.org/]http://incubator.apache.org/[http://incubator.apache.org/]

Process:
++++++++

All Gluster projects will need to enter through the Gluster Incubator,
regardless of history or heritage of the project. This entrance is
required to ensure the following conditions are met before becoming a
“full-fledged” Gluster project:

* The new project agrees to the following:
** Integrate with one of the Gluster published APIs
** Support the platform's release schedule.
** Follow the guidelines for acceptable licenses. A change in licensing
must have board approval by unanimous vote. To view the list of
acceptable license, see
http://www.gluster.org/project-licensing/[http://www.gluster.org/project-licensing/]
* All copyright associated with the project codebase and support files
(eg: website content, logos, documentation, etc) is of known provenance
and provides a clear license from copyright holder to Gluster.
* A “healthy” project, as determined by the Gluster Board, exists, more
details at
http://www.ovirt.org/project-maturity/[http://www.]http://www.ovirt.org/project-maturity/[gluster]http://www.ovirt.org/project-maturity/[.org/project-maturity/]

If an accepted project does not meet the above requirements, it will
remain in the incubation state until such measures are corrected. It is
the task of the Board to clearly define for the project what measures
are required for graduation.

The Incubated project can, at any time, petition for a vote by the Board
to graduate to full status. The vote of the Board must be unanimous. Any
NO votes must clearly indicate why the board member did not approve
graduation and must provide clear guidance on what he/she is looking for
to address the deficiency.

Project Maturity
----------------

Gluster’s goal is to have strong, diverse, well-functioning projects. It
is also believed that those closest to the details and code make the
best decisions in how to move things forward. However, in delivering a
complete storage stack, integration and coordination is required, which
can provide context. The Eclipse community is a good example of many
projects coordinating around named frameworks and APIs. For anyone
familiar with Eclipse, the two rules for projects have been modeled from
that community

When projects are new and developing, the boards role is to encourage
and help in every way possible to grow the project. The Gluster board
uses the following basic life phases of projects to move from more
involvement through to an autonomous project.

* Developing; x< 3 maintainers, y < 3 releases; Gluster board has
ability to make decisions on behalf of the project.
* Maturing; 3<= x< 10 maintainers, y > 3 releases; project is
autonomous, but must use Gluster-recommended voting procedures and
membership model.
* Mature; x >= 10 maintainers, project is autonomous and can write its
own governance documents. These documents need to be public and voted on
by the Gluster board.

This provides a lightweight incubator model where Gluster helps a
projects grow and gets out of the way once it reaches critical mass,
while still providing the coordination for Gluster CS releases and
architecture discussions.

If an existing project wants to join Gluster, the board is free to
determine where they are on the maturity scale and join that project at
the appropriate tier.

Indications of a Healthy Project
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

One main factor that indicates graduation is clear indication of a
“healthy” project. There are many ways to measure this, but Gluster
takes its lead from the ASF. The below list some factors that represent
a high measure of health:

* At least 3 active contributors, since code commits and releases
require at least 3 +1 votes.
* A high level of diversity within the developer community. This ensures
that not a single vendor or company has undue influence over the
project.
* A high level of self-reliance and self-direction. The project is able
to handle conflicts on its own without intervention by the oVirt board
or other external entities.
* A high level of shown consensus building. The project must show that
it is able to work within itself and build consensus on not only code
(eg: which patch to apply), but also regarding future direction, etc…
* Growth of the developer community. This indicates the ability of the
project to attract new developers.
* Growth of the project itself. This indicates that the project is able
to recognize the efforts of new developers and add them to the roster of
those with both commit privileges as well as voting rights within the
project.

Gluster Board
-------------

The board's role is to coordinate and ensure the smooth running of the
Gluster project. The role of the board in Gluster is specifically to

1.  Define charter & goals for Gluster Community
2.  Ratify new projects into Gluster
3.  Provide support for new projects through the maturity cycle (see
'adding a new project')
4.  Vote in new board members (based on merit criteria)
5.  Coordinate consolidated release schedules
6.  Ratify votes for smaller member projects (<3 maintainers)
7.  Develop the Gluster Community
8.  Set license policies and deal with licensing questions and issues
9.  Facilitate a form for cross-project architectural coordination
10. Be role-models for the Gluster Community
11. Oversee the Gluster Community to ensure it abides by expectations
regarding its governance, neutrality and health.
12. Help protect the Gluster brand and trademarks.

Expectations of Board Members
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Individual board members are expected to attend board meetings, vote on
issues when requested, and otherwise continue making contributions to
the Gluster community. These contributions can take many forms. See
“Membership Criteria”, below.

The board specifically does not get involved in the day-to-day
management of projects or technical implementation. It may, however,
help facilitate communication between projects to resolve release
schedules or integration issues.

There is no limit to the number of seats on the board. Additional board
members are voted onto the board by the existing board members based on
merit. The basic criteria for a board member is someone who:

1.  Is recognized in their community of influence
2.  Puts the ‘right’ decision for the project above personal agenda
3.  Is involved in issues broader than a single project (for example
helps release the complete stack, helps with Gluster coordination,
markets for Gluster projects, runs meet-ups, does community work,
organizes contests, writes articles and blog posts, contributes
documentation, etc)

Additional board seats can be voted on at any time based on merit. It is
expected that once someone demonstrates the attributes to be a board
member consistently for a period of time the board may take up the
consideration of that individual for board membership.

Each year, a Chairman shall be elected from the current board. The terms
and conditions for the Chair are the exact same as for the board members
in general. The sole duties of the Chair will be to run the meetings and
cast any tie-breaking vote. If the Chair is unable to attend, he/she
shall appoint an available Director to run the meeting on their behalf.

Membership Criteria
^^^^^^^^^^^^^^^^^^^

The initial board has been composed in the following way:

1.  Those companies that have strategically committed to the project
start with one self-selected board seat. A company is deemed to be
strategic if it has committed resources for Gluster projects in some of
the following ways:
1.  Code contributions – continue to write and contribute code to any
project within the Gluster community. For example, writing the GlusterFS
block device driver for QEMU.
2.  Meetups and other events – hosting and sponsoring meetups,
birds-of-a-feather, and online events. Could also include submitting
Gluster community talks at conferences.
3.  Marketing and evangelism – conducts outreach to media, posts Gluster
community logo in a conspicuous location, and any other activities that
fall under the marketing banner.
4.  Education – writes and contributes documentation for users and
developers, as well as writes articles and blog posts for high-traffic
web publications
5.  Other community activities – any other type of activity that
demonstrates a material commitment to the success of the Gluster
community through contributions that require time and effort.
2.  A few domain leaders from projects. Not all projects have board
representation, but individual community members can work to fill some
of these seats related to projects. Not every project has to be on the
board. They do, however, need to participate in the coordination mail
lists
3.  Mentors. Individuals volunteering to help get the Gluster project
running.

The term of a board seat is one year, with no limit to the number of
terms a Board Member may serve. Once voted into the Gluster board, they
will serve one term, at the end of which they may choose to run again.
The goal is to be able to have individuals serve as many terms as they
are able and maintain influence on the board independent of employment,
as long as they are contributing community members in good standing.
Vacancies in the board are not required to be filled. A board member may
be removed at any time for reason upon a 3/5ths majority vote of the
entire board. There is no differentiation between corporate or community
members on the board, and there are no corporate votes. All votes and
decisions are made through the lens of what is best for the Gluster
project.

New board members have the same membership criteria as the initial pool.
In addition, the Gluster Community itself may nominate candidates for
the board, and the board is expected to seriously consider these
candidates for voting, although it is not obligated to do so.

If you wish to join the Gluster project strategically, please contact:

* The board at
mailto:board@oVirt.org[board@]mailto:board@oVirt.org[gluster]mailto:board@oVirt.org[.org]

Terms and Elections
^^^^^^^^^^^^^^^^^^^

Each year, the incumbent board votes on applicants for the new board.
Each applicant is considered individually for voting by the board.
Current directors in Good Standing may stand for re-election. A majority
of the current board must vote in each applicant, regardless of how many
board members vote. The board chair will cast the deciding vote whenever
there is a tie.

Meetings
^^^^^^^^

The board will meet at least once per quarter, with the exception of
special meetings called to decide on urgent matters. To call a special
meeting, a board member must make a request, seconded by another board
member. Examples of topics for special meetings could include changes in
release schedules, legal matters, governance changes or anything else
that the board regards as a pressing matter. Board meetings will be held
via teleconference or such other methods as the board approves, such as
web-chat.

The Board Chair will schedule regular, quarterly meetings.

Board Voting
^^^^^^^^^^^^

Voting by the Gluster Board will most often be by majority of those
present, with attendance by 2/3 of current Board Members constituting a
quorum. In the absence of a quorum, Members may discuss any item
pertaining to the Gluster Community, but no binding decisions or voting
will be allowed.

At times, a 3/5ths majority of present Board Members will be required
for a vote to pass. These exceptions are limited to the following:
removing or replacing the Board Chair, removing a Board Member before
the expiration of his/her term, and modifications to community
governance.

Initial Gluster Board Members
+++++++++++++++++++++++++++++

*

Releases and release management
-------------------------------

Major Gluster releases occur every nine months to 1 year. Minor releases
are approximately every 3 months.

The Gluster project maintains
http://www.ovirt.org/wiki/Release_Process[documentation on the release
process] on the http://www.ovirt.org/wiki/[project wiki].
