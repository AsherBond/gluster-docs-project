(http://www.gluster.org/community/documentation/index.php/Planning34[Back
to 3.4 planning page]?)

Feature

-------------------
disperse translator
-------------------

1 Summary

------------------------------------------------------------------------------
Add a new layout translator that uses an information dispersal algorithm (IDA)
to fragment the file contents and disperse them amongst a set of bricks with a
configurable level of redundancy. It improves the reliability and availability
of the data (similar to replicate) but at the same time it reduces the wasted
space (between stripe and replicate). The drawback is a small theoretical
slowdown in some configurations (real effects to be determined yet).
------------------------------------------------------------------------------

2 Owners

----------------------------------------
Xavier Hernandez <xhernandez@datalab.es>
----------------------------------------

3 Current status

------------------------
Currently in development
------------------------

4 Detailed Description

-------------------------------------------------------------------------------
This translator uses the Rabin's IDA to split each file of size S into F+R
fragments of size S/F in a way that any subset of F fragments is sufficient to
recompose the original file contents. R is the level of redundancy, meaning
that up to R fragments can be lost without data loss.
In a normal setup, each of the F+R fragments are stored in a different brick,
preferably on different nodes to avoid multiple redundancy loses when a node is
down. F and R are preconfigured at volume creation time and cannot be changed
afterwards (at least in this first version). However it can be combined with
the distribute translator to create a distributed-dispersed volume to increase
the available space and performance (increment IOPS).
R must be greater than 0 and lesser than F. A configuration with R=0 is
equivalent to stripe, so the stripe translator should be used for this case.
When R=F, it's equivalent to replicate, and the replicate translator should be
used for this setup. This means that any configuration used with the disperse
translator will waste less than two times the logical volume space, but can be
configured to allow more than one brick simultaneously offline.
The network traffic will also be reduced because each brick will receive only
a fragment of each file, not the entire file. The total amount of data sent
through the wire is always lesser than twice the size of the file.
The Rabin's algorithm has been optimized to achieve speeds of several hundreds
of MB/s in the worst case, avoiding being a bottleneck.
The translator also includes healing capabilities that can run in background
with minimal impact to other operations. A file can be healed without locking
it, avoiding disruptions of other operations.
For example, here are some configurations with stripe, replicate and disperse
with a logical volume size of 8TB. L is the size of a file.
-------------------------------------------------------------------------------

Comparison of some configurations with the same logical size

Replicate

Replicate

Disperse

Disperse

Disperse

Disperse

Disperse

Disperse

Disperse

Stripe

Configuration

8*3

8*2

8+7

8+6

8+5

8+4

8+3

8+2

8+1

8

Space used on each brick per file

L

L

L/8

L/8

L/8

L/8

L/8

L/8

L/8

L/8

Total space used per file

3*L

2*L

1.88*L

1.75*L

1.63*L

1.5*L

1.38*L

1.25*L

1.13*L

L

Network traffic to each brick per file

L

L

L/8

L/8

L/8

L/8

L/8

L/8

L/8

L/8

Total network traffic per file

3*L

2*L

1.88*L

1.75*L

1.63*L

1.5*L

1.38*L

1.25*L

1.13*L

L

Bricks

3

2

15

14

13

12

11

10

9

8

Space in each brick

8TB

8TB

1TB

1TB

1TB

1TB

1TB

1TB

1TB

1TB

Total physical size

24TB

16TB

15TB

14TB

13TB

12TB

11TB

10TB

9TB

8TB

Total logical size

8TB

8TB

8TB

8TB

8TB

8TB

8TB

8TB

8TB

8TB

Wasted space

66.7%

50%

46.7%

42.9%

38.5%

33.3%

27.3%

20%

11.1%

0%

Maximum failed bricks

2

1

7

6

5

4

3

2

1

0

5 Benefit to GlusterFS

------------------------------------------------------------------------------
GlusterFS users will be able to create volumes with higher redundancy but with
a minimal waste of space.
------------------------------------------------------------------------------

\6. Scope

6.1. Nature of proposed change

-------------------------------------------------------------------------------
This functionality will require a server side translator that will help with
the healing operations and a client side translator that will implement IDA and
all handling logic.
-------------------------------------------------------------------------------

6.2. Implications on manageability

-------------------------------------------------------------------------------
Some modifications will be needed in the CLI interface to allow the creation of
this new kind of volume and its configuration options.
-------------------------------------------------------------------------------

6.3. Implications on presentation layer

----
None
----

6.4. Implications on persistence layer

----
None
----

6.5. Implications on 'GlusterFS' backend

----
None
----

6.6. Modification to GlusterFS metadata

----------------------------------------------------------------------------
New extended attributes will be added to each inode to manage the dispersion
and healing of each file.
----------------------------------------------------------------------------

6.7. Implications on 'glusterd'

7 How To Test

8 User Experience

9 Dependencies

--------------------------------------------------------------------------
For heavily optimized IDA, Intel SSE2 extensions or equivalent are needed.
However it can work without them, though a little slower.
--------------------------------------------------------------------------

10 Documentation

11 Status

--------------
In development
--------------

12 Comments and Discussion

---------------------
Source code on github
---------------------
