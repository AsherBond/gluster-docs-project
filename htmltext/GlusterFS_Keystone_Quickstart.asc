This is a document in progress, and may contain some errors or missing
information. This document assumes you already have GlusterFS with UFO
installed, 3.3.1-11 or later, and are using the instructions here:

------------------------------------------------------------------------------------
 http://www.gluster.org/2012/09/howto-using-ufo-swift-a-quick-and-dirty-setup-guide/
------------------------------------------------------------------------------------

And openstack-keystone version 2012.2.1-1, which has a race condition,
which the patch here fixes:

-------------------------------------------------------------------------------
 https://raw.github.com/awheeler/GlusterFS-Misc/master/patches/auth_token.patch
-------------------------------------------------------------------------------

These docs are largely derived from:

-------------------------------------------------------------------------------------------------
 http://fedoraproject.org/wiki/Getting_started_with_OpenStack_on_Fedora_17#Initial_Keystone_setup
-------------------------------------------------------------------------------------------------

The pylibmc and libmemcached (from the Remi repo) install are in support
of the patch. Add the Remi and Epel repos:

-----------------------------------------------------------------------------------
 $ rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
 $ rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
-----------------------------------------------------------------------------------

Install Openstack-Keystone

----------------------------------------------------------------------------------
 $ yum install --enablerepo=remi openstack-keystone libmemcached openstack-utils \
   python-keystoneclient
----------------------------------------------------------------------------------

Install pylibmc, which provides thread-safe access to memcached via a
pool:

-------------------------------------------------------------------
 $ yum install -y --enablerepo=remi libmemcached-devel python-devel
 $ easy_install pylibmc
-------------------------------------------------------------------

Configure keystone

-------------------------------------------------------------------------------------------
 $ sudo openstack-db --service keystone --init
 $ sudo systemctl start openstack-keystone.service
 $ sudo systemctl enable openstack-keystone.service
 $ cat > keystonerc << _EOF
 export ADMIN_TOKEN=$(openssl rand -hex 10)
 export OS_USERNAME=admin
 export OS_PASSWORD=verybadpass
 export OS_TENANT_NAME=admin
 export OS_AUTH_URL=https://127.0.0.1:5000/v2.0/
 export SERVICE_ENDPOINT=https://127.0.0.1:35357/v2.0/
 export SERVICE_TOKEN=\$ADMIN_TOKEN
 _EOF
 $ . ./keystonerc
 $ sudo openstack-config --set /etc/keystone/keystone.conf DEFAULT admin_token $ADMIN_TOKEN
 $ sudo systemctl start openstack-keystone.service
 $ sudo systemctl enable openstack-keystone.service
-------------------------------------------------------------------------------------------

Append the keystone configs to /etc/swift/proxy-server.conf

---------------------------------------------------------------------
 $ cat >> /etc/swift/proxy-server.conf << _EOM
 [filter:keystone]
 paste.filter_factory = keystone.middleware.swift_auth:filter_factory
 operator_roles = admin, swiftoperator
 
 [filter:authtoken]
 paste.filter_factory = keystone.middleware.auth_token:filter_factory
 auth_port = 35357
 auth_host = 127.0.0.1
 auth_protocol = https
 memcache_servers = 127.0.0.1:11211
 _EOM
---------------------------------------------------------------------

Finish configuring both swift and keystone using the command-line tool:

------------------------------------------------------------------------------------------------
 $ openstack-config --set /etc/swift/proxy-server.conf filter:authtoken admin_token $ADMIN_TOKEN
 $ openstack-config --set /etc/swift/proxy-server.conf filter:authtoken auth_token $ADMIN_TOKEN
 $ openstack-config --set /etc/keystone/keystone.conf DEFAULT admin_token $ADMIN_TOKEN
 $ openstack-config --set /etc/keystone/keystone.conf ssl enable True
 $ openstack-config --set /etc/keystone/keystone.conf ssl keyfile /etc/swift/cert.key
 $ openstack-config --set /etc/keystone/keystone.conf ssl certfile /etc/swift/cert.crt
------------------------------------------------------------------------------------------------

Configure keystone to start at boot, start it up, and initialize the
default sqlite database in /var/tmp/keystone.db

----------------------------------------------------
 $ sudo chkconfig openstack-keystone on
 $ sudo /etc/init.d/openstack-keystone start
 $ sudo keystone-manage db_sync
 $ sudo chown keystone.keystone /var/tmp/keystone.db
----------------------------------------------------

We are using untrusted certs, so tell keystone not to complain. If you
replace with trusted certs, or are not using SSL, set this to "".

------------------------
 $ INSECURE="--insecure"
------------------------

Create the keystone and swift services in keystone:

--------------------------------------------------------------------------------------------------------------------------------------------------------------
 $ KS_SERVICEID=$(keystone $INSECURE service-create --name=keystone --type=identity --description="Keystone Identity Service" | grep " id " | cut -d "|" -f 3)
 $ SW_SERVICEID=$(keystone $INSECURE service-create --name=swift --type=object-store --description="Swift Service" | grep " id " | cut -d "|" -f 3)
 $ endpoint="https://127.0.0.1:443"
 $ keystone $INSECURE endpoint-create --service_id $KS_SERVICEID \
   --publicurl $endpoint'/v2.0' --adminurl $http://127.0.0.1:35357/v2.0 \
   --internalurl $http://127.0.0.1:5000/v2.0
 $ keystone $INSECURE endpoint-create --service_id $SW_SERVICEID \
   --publicurl $endpoint'/v1/AUTH_$(tenant_id)s' \
   --adminurl $endpoint'/v1/AUTH_$(tenant_id)s' \
   --internalurl $endpoint'/v1/AUTH_$(tenant_id)s'
--------------------------------------------------------------------------------------------------------------------------------------------------------------

Create the admin tenant:

-------------------------------------------------------------------------------------------------------------------------------
 $ admin_id=$(keystone $INSECURE tenant-create --name admin --description "Internal Admin Tenant" | grep id | awk '{print $4}')
-------------------------------------------------------------------------------------------------------------------------------

Create the admin roles:

----------------------------------------------------------------------------------------------------------
 $ admin_role=$(keystone $INSECURE role-create --name admin | grep id | awk '{print $4}')
 $ ksadmin_role=$(keystone $INSECURE role-create --name KeystoneServiceAdmin | grep id | awk '{print $4}')
 $ kadmin_role=$(keystone $INSECURE role-create --name KeystoneAdmin | grep id | awk '{print $4}')
 $ member_role=$(keystone $INSECURE role-create --name member | grep id | awk '{print $4}')
----------------------------------------------------------------------------------------------------------

Create the admin user:

--------------------------------------------------------------------------------------------------------------------------------
 $ user_id=$(keystone $INSECURE user-create --name admin --tenant-id $admin_id --pass $OS_PASSWORD | grep id | awk '{print $4}')
 $ keystone $INSECURE user-role-add --user-id $user_id --tenant-id $admin_id \
   --role-id $admin_role
 $ keystone $INSECURE user-role-add --user-id $user_id --tenant-id $admin_id \
   --role-id $kadmin_role
 $ keystone $INSECURE user-role-add --user-id $user_id --tenant-id $admin_id \
   --role-id $ksadmin_role
--------------------------------------------------------------------------------------------------------------------------------

If you do not have multi-volume support (broken in 3.3.1-11), then the
volume names will not correlate to the tenants, and all tenants will map
to the same volume, so just use a normal name. (This will be fixed in
3.4, and should be fixed in 3.4 Beta. The bug report for this is here:
https://bugzilla.redhat.com/show_bug.cgi?id=924792[https://bugzilla.redhat.com/show_bug.cgi?id=924792])

-----------------
 $ admin_id=admin
-----------------

Create the admin volume:

----------------------------------------------------------------
 $ sudo gluster volume create $admin_id $myhostname:$pathtobrick
 $ sudo service openstack-keystone start
----------------------------------------------------------------

Apply the patch, assumed to be in /tmp/auth_token.patch:

----------------------------------------------------------
 $ cd /var/lib/python2.6/site_packages/keystone/middleware
 $ sudo patch -p0 < /tmp/auth_token.patch
----------------------------------------------------------

Create the ring for the admin tenant. If you have working multi-volume
support, then you can specify multiple volume names in the call:

-----------------------------------------------------
 $ cd /etc/swift
 $ sudo /usr/bin/gluster-swift-gen-builders $admin_id
 $ sudo swift-init main restart
-----------------------------------------------------

Create a testadmin user associated with the admin tenant with password
testadmin and admin role:

---------------------------------------------------------------------------------------------------------------------------------
 $ user_id=$(keystone $INSECURE user-create --name testadmin --tenant-id $admin_id --pass testadmin | grep id | awk '{print $4}')
 $ keystone $INSECURE user-role-add --user-id $user_id --tenant-id $admin_id \
   --role-id $admin_role
---------------------------------------------------------------------------------------------------------------------------------

Test the user:

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 $ curl -d '{"auth":{"tenantName": "admin", "passwordCredentials":{"username": "testadmin", "password": "testadmin"}}}' -H "Content-type: application/json" https://127.0.0.1:5000/v2.0/tokens
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

See here for more examples:

--------------------------------------------------------------------
 http://docs.openstack.org/developer/keystone/api_curl_examples.html
--------------------------------------------------------------------
