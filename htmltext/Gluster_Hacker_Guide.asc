Contents
~~~~~~~~

* link:#Source_repository[1 Source repository]
** link:#Anonymous_access[1.1 Anonymous access]
** link:#Developer_Access[1.2 Developer Access]
** link:#Repository_Developer_Checkout[1.3 Repository Developer
Checkout]
* link:#Compiling_Gluster[2 Compiling Gluster]
** link:#Setting-up_Toolchain[2.1 Setting-up Toolchain]
** link:#Compiling_the_source[2.2 Compiling the source]
* link:#Porting_Gluster[3 Porting Gluster]
** link:#Building_toolchain_for_a_new_architecture[3.1 Building
toolchain for a new architecture]
* link:#Gluster_Platform_Utilities[4 Gluster Platform Utilities]

Source repository
~~~~~~~~~~~~~~~~~

You can get the latest and unreleased developer's source from the
Savannah's GNU Arch repository.

Anonymous access
^^^^^^^^^^^^^^^^

---------------------------------------------------------------
$ tla register-archive http://arch.sv.gnu.org/archives/gluster/
$ tla get -A gluster@sv.gnu.org gluster--mainline--1.1 gluster
---------------------------------------------------------------

Developer Access
^^^^^^^^^^^^^^^^

Setting-up signatures auto-checking

-------------------------------------------------------------------------------------------------
$ mkdir -p -m 700 ~/.arch-params/signing/
$ echo 'tla-gpg-check gpg_command="gpg --verify-files -"' > ~/.arch-params/signing/=default.check
$ echo 'gpg --clearsign --use-agent' > ~/.arch-params/signing/=default
-------------------------------------------------------------------------------------------------

You may also be interested in the
http://savannah.nongnu.org/project/memberlist-gpgkeys.php?group=gluster[GPG
Keyring of this project].

*Note:* _Copy tla/=gpg-check.awk from GNU Arch source to your bin path
as tla-gpg-check. Debian GNU/Linux does this by default. Option
--use-agent requires gnupg-agent package as well. You need this option
if you do not want to enter password everytime you commit. To initialize
gnupg-agent, execute gpg-agent --daemon in your current shell context._

Repository Developer Checkout
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-------------------------------------------------------------------
$ tla my-id "FIRST-NAME LAST-NAME <YOUR-EMAIL-ID>"
$ tla register-archive sftp://USER@arch.sv.gnu.org/archives/gluster
$ tla my-default-archive gluster@sv.gnu.org
$ tla get gluster--mainline--1.1 gluster
-------------------------------------------------------------------

Compiling Gluster
~~~~~~~~~~~~~~~~~

Setting-up Toolchain
^^^^^^^^^^^^^^^^^^^^

To build Gluster from source, you will need the gluster Toolchain for
your architecture. Download the toolchain, extract it, and add its top
level bin/ directory to your path. If your architecture is, say x86_64.
Then,

-----------------------------------------------------------------------------------------------
$ wget http://gnu.zresearch.com/pub/gluster/release/toolchain/gluster-toolchain-v2-on64.tar.bz2
$ tar -C /usr/local -xjf gluster-toolchain-v2-on64.tar.bz2
$ export $PATH=$PATH:/usr/local/gluster-toolchain/bin
-----------------------------------------------------------------------------------------------

in order to continue with the compilation of the tla sources you will
also need to install

----------
- libtool
- automake
----------

Compiling the source
^^^^^^^^^^^^^^^^^^^^

Gluster uses GNU autotools as its build system. You need to mention the
toolchain you want to build Gluster with (and hence, the architecture on
which you want to run Gluster). Gluster cannot be built on the native
machine. It compulsorily needs a seperate toolchain. The toolchain (and
hence, architecture) is specified to the build system's configure script
with the standard --host argument. If your architecutire is, say x86_64
you don't have to specify --host or --build or anything. Fact is
./configure understands by default checks for its architecture on which
is being built.

---------------------------------
$ cd gluster
$ ./autogen.sh
$ ./configure --prefix=/usr
$ make iso
$ ls gluster-<version>-x86_64.iso
---------------------------------

The ISO can be burnt to a CD and used to boot into Gluster.

Porting Gluster
~~~~~~~~~~~~~~~

Building toolchain for a new architecture
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Gluster toolchains are built using crosstool. Crosstool is available
here
http://kegel.com/crosstool/crosstool-0.42.tar.gz[http://kegel.com/crosstool/crosstool-0.42.tar.gz]
. Steps for building toolchain for gluster involve:

* Extract crosstool
* Edit options file, <arch>-static.dat (i686-static.dat for i686 arch)
and change TARGET to 'i686-gluster-linux-gnu', make sure that
USE_SYSROOT=1.
* Edit demo-<arch>.sh file and set the RESULT_TOP, TARBALLS_DIR to
relavent paths.
* Edit demo-<arch>.sh and set GCC_LANGUAGES to "c, c++, fortran".
* Edit demo-<arch>.sh and uncomment the line relevent to newest gcc and
glibc.

------------------------------------------------------------------------------------------
  Eg. uncomment the line with following command in it, to build gcc-4.1.0 and glibc-2.3.6.
         eval `cat i686-static.dat gcc-4.1.0-glibc-2.3.6.dat` sh all.sh --notest
------------------------------------------------------------------------------------------

* Now run run the demo-<arch>.sh script to build the toolchain.

After this you follow the same compile procedure listed above for your
new platform.

Gluster Platform Utilities
~~~~~~~~~~~~~~~~~~~~~~~~~~

Brief description about utility tools present in gluster is given here
..
*http://www.gluster.org/community/documentation/index.php/Gluster_Platform_Utilities[Gluster
Platform Utilities]*
