Contents
~~~~~~~~

* link:#Current_Implementation[1 Current Implementation]
* link:#Current_Issues[2 Current Issues]
** link:#GeoRep[2.1 GeoRep]
** link:#UFO[2.2 UFO]
* link:#Future_Considerations[3 Future Considerations]

Current Implementation
----------------------

The Glusterfs volume's equivalent of an inode is a GFID. Glusterfs does
notg have a direct notion of a hardlink (multiple paths pointing to the
same GFID), instead relying on the brick level hardlink mechanism to
implement a notion of hard links.

For Distributed Volumes:

* An individual file exists on only one brick, and consists of
** A localfs inode containing file data. Associated with the inode is an
xattr containing the GFID value
*** If a file resides on a brick other than the one specified by the
directories has ranges, and additional linkto file may be created
** A dentry within a brick's local filesystem directory corresponding to
the files path
** An additional hardlink within the .glusterfs directory based on GFID.
The dentry for this link is contained in a second-level sub-dorectory of
.glusterfs based on a hsh of the first 4 characters in the GFID name
* For additional links to the file
** Hard links for the new path are created on the same brick that
contains the existng inode.
** Linkto files are created on other nodes, as needed, based on hash
range mapping for the new path names

For Replicated volumes, inodes and hardlinks exist on the brick
corresponding to each replica. The .glustergs directory for each brick
also contains links for each GFID to the corresponding localfs inode.

Current Issues
--------------

There are two categories of use, today, that break the pattern of one
brick inode per GFID. In each of these situations, updates result in the
creation of new (replacement) brick inode while ideally preserving the
existing GFID.

GeoRep
~~~~~~

Use of RSYNC and Copy within GeoRep. In order to protect against
communications failures, the RSYNC and/or COPY is initially to a new
temporary files, and once transmission is successful, a rename is used
to commit the change into the local namespace. Some implications

* Replication version has new GFID, inconsistent with our goal of GFID
based GeoReplication
* If multiple hard links to the same file, the other linking nodes may
miss the update unless some type of explicit clean-up is involved

UFO
~~~

UFO (Swift) uses a similar approach of committing via rename after file
successfully transfered. The initial result of a PUT operation is a
temporary file, and this temporary file is committed via mv/rename. This
means that each update is a new GFID (correct, UFO has the concept of
distinct version), but any linked from the POSIX view (unified use-case)
may become stale.

 +

Future Considerations
---------------------
