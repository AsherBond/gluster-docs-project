Contents
~~~~~~~~

* link:#Index_Translator_Data_Structures[1 Index Translator Data
Structures]
* link:#Index_Translator_Operation[2 Index Translator Operation]
** link:#Call_Structure[2.1 Call Structure]
*** link:#xattrop[2.1.1 xattrop]
*** link:#fxattrop[2.1.2 fxattrop]
*** link:#getxattr[2.1.3 getxattr]
*** link:#lookup[2.1.4 lookup]
*** link:#readdir[2.1.5 readdir]
*** link:#unlink[2.1.6 unlink]
* link:#Call_Stubs[3 Call Stubs]
** link:#Use_of_Call_Stubs_in_Index_Translator[3.1 Use of Call Stubs in
Index Translator]
** #Background:_Call_Stubs[3.2 Background: Call Stubs]

Index Translator Data Structures
--------------------------------

Types:

* index_state_t
** UNKNOWN, IN or NOTIN
* index_inode_ctx_t
** list of callstubs
** state
* index_fd_ctx_t
** dir
* index_priv_t. Includes:
** index_basepath
** uuid for index
** grid of the xattrop index dir
** locking: lock, mutex and cont

 +
 Macros:

* INDEX_STACK_UNWIND

Index Translator Operation
--------------------------

Operations monitored by Index:

* fops (worker_enqueue called for each fop, index_queue_process called
by most fop callbacks)
** xattrop
** fxattrop
** lookup
** readdir
** unlink
* callbacks
** forget - frees context associated with inode
** release -- frees context associated with fd
** releasedir - closes open directory and frees associated context

Call Structure
~~~~~~~~~~~~~~

Operations

xattrop
^^^^^^^

* index_xattrop
** index_xattrop_track()
** fop_xattrop_stub()
** index_xattrop_wrapper() - parameter to callstub
*** index_xattrop_cbk()
**** fop_xattrop_index_action()
***** _xattrop_index_acton()
****** _check_key_is_zer0_filled()
****** index_add()
******* make_gfid_path()
******* index_get_index()
******* make_index_path()
******* index_dir_create()
******* index_generate_index()
****** index_del()
******* make_gfid_path()
** index_queue_process()

fxattrop
^^^^^^^^

* index_fxattrop
** *** index_fxattrop_track()
*** fop_fxattrop_sub()
*** index_fxattrop_wrapper() - parameter to callstub
**** index_fxattrop_cbk()
***** fop_fxattrop_index_action()
****** _xattrop_index_acton() - shared with fop_xattrop_index_action
** index_queue_process()

getxattr
^^^^^^^^

* index_getxattr()
** fop_getxattr_stub()
** index_getxattr_wrapper() - parameter to call stub
** worker_enqueue()

lookup
^^^^^^

* index_lookup()
** fop_lookup_stub()
** index_lookup_wrapper() - parameter to call stub
*** make_file_path()
** worker_enqueue()

readdir
^^^^^^^

* index_readdir()
** fop_readdir_stub()
** index_readdir_wrapper() - parameter to call stub
*** index_fill_readdir()
**** check_delete_stale_index()
***** make_file_path()
** worker_enqueue()

unlink
^^^^^^

* index_unlink()
** fop_unlink_stub()
** index_unlink_wrapper() - parameter to call stub
*** index_del()
** worker_enqueue

Call Stubs
----------

Use of Call Stubs in Index Translator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Housekeeping functions

* worker_enqueue - called by operations below (getxattr, lookup,
readdir, unlink)
* index_worker -- called from init
* index_queue_process - called by callbacks (xattrop, fxattrop, xattrop,
fxattrop)

Operations:

* xattrop
* lookup
* readdir
* unlink

 +

Background: Call Stubs
~~~~~~~~~~~~~~~~~~~~~~

Information on call-stub may be found at:
https://github.com/gluster/glusterfs/blob/master/doc/legacy/hacker-guide/call-stub.txt[call-stub.txt].
Note: Contained in doc/legacy/hacker-guide section of gluster source
tree, so some information may be obsolete.

Call-stub is a set of APIs to pause each of the fop. Parameters to each
API is

* @frame - call frame which has to be used to resume the call at
call_resume().
* @fn - procedure to call during call_resume().

Resuming a call:

* call can be resumed using call stub through call_resume API.
* void call_resume (call_stub_t *stub);
** stub - call stub created during pausing a call.
** NOTE: call_resume() will decrease reference count of any fd_t, dict_t
and inode_t that it finds in
stub->args.<operation>.<fd_t-or-inode_t-or-dict_t>. so, if any fd_t,
dict_t or inode_t pointers are assigned at
stub->args.<operation>.<fd_t-or-inode_t-or-dict_t> after
fop_<operation>_stub() call, they must be
<fd_t-or-inode_t-or-dict_t>_ref()ed.
** call_resume does not STACK_DESTROY() for any fop.
** if stub->fn is NULL, call_resume does STACK_WIND() or STACK_UNWIND()
using the stub->frame.
** return - call resume fails only if stub is NULL. call resume fails
with errno set to EINVAL.

Routines used by Index translator:

* call_stub_destroy()
* call_stub_resume()
* fop_xattrop_stub()
* fop_fxattrop_stub()
* fop_getxattr_stub()
* fop_lookup_stub()
* fop_readdir_stub()

