[[]]
Background
----------

The Change Logging Subsystem is intended to be a general mechanism to
identify and log changes made to an individual brick within a Gluster
volume. Logically the translator sits just above the POSIX translator.
Each each translator provides a brick-specific view, any application
consuming the translator output may need to aggregate logs in order to
yield an overall view of activities to any given volume.

The change logging subsystem is envisioned to consist of two
sub-components

* Index Translator Support for Change Logging: An extension to the
current Glusterfs Index translator to capture important events. Since
this realtime service that lives within the data path, it is intended to
be light weight.
* Change Logging Service: This is a higher level service that allows
multiple Consumers to subscribe to change events. This service is
expected to live outside the translator framework and processes change
in a periodic batched manner.

The Change Logging Translator is modeled after the Index Translator.
see: link:Arch/Understanding_Index_Translator_Design[Understanding Index
Translator Internals]

[[]]
Consumers
---------

The following use-cases are currently envisioned for the change
detection translator:

* Parallel GepRep and Active-Active GeoRep
* Bit Rot Detection
* User file change service (for example, use by backup utilities)

Other potential consumers of change detection service:

* Dedupe
* AFR Self-heal
* Ordered-Async Replication
* Overall maintenance of file or block-level checksums (such as DeDupe,
SMB3)
* Performance tools
* Trigger translator or inotify service.

[[]]
Design Principles
-----------------

A key design principle of the change detection translator is that is be
sufficiently fast with it can be enabled in the mainstream with minimal
overhead. Implications include:

* Should be a general mechanism, where the selection of logged operation
is handled at translator initialization/configuration time. The logging
translator should be generic, and not include any logic specific to an
individual use-case (GeoRep vs DeDupe ...)
** If is expected that there may be multiple log readers that my
subscribe to a log file, and that these log readers may include use-case
specific logic. These readers are expected to live outside the Gluster
Translator frame and may be implemented in Python, C or Java.
* Translator should impose negligible performance tax in the
steady-state for routine Gluster operations.
* Change logging should impose minimal load on underlying block
filesystem and disk subsystem.
** For example, if xtime is used as timestamp and timestamp only has
granularity of 1 sec, then write entries only need t be updated every
second (other writes do not require logging).

[[]]
Change Log Low-level Structure
------------------------------

The following approach may be used to transfer information between the
index translator service and the higher-level change log service.
Similar to other operations within Index, data is captured and exchanged
using directory links to make change data resilient across crashes.
Brick/ | +- .changelog/ | +- current/ This directory accumulates all new
changes within Index | | | ... | | | +- individual entries | ... | +-
<timestamp>/ This is an example of a set of exported events | ...

The general concept is that change events are encoded as links with a
directory. In the example, above, this directory is known as current.

On a period basis, change events are exported from the index translator
to the change log service. Export is accomplished by creating switching
to a new current directory (for future index use), and renaming the old
current directory to a well known name, such as something based on
timestamp.

Upon start-up of a brick, the Index translator should examine the state
of the current directory, If the directory is non-empty, this
information should be exported to the changelog service (note: directory
may contain pending changes prior to a crash that had not yet been
exported to changelog.

[[]]
Change Log Entries
~~~~~~~~~~~~~~~~~~

Format of Change Log Entries

* TYPE-I -- Data Modification
** Format: DATA
** Includes: creat, writev, truncate, ftruncate
** Ideally, should include local filesystem inode. This information can
be used to sort changes inodes for optimal performance
** May want to optionally log Open mode (trunc, append) to provide hint
on optimal copy engine (rsync vs full copy ...)
* TYPE-II - Metadata Modification
** Includes: setxattr, fsetxattr, removexattr, fremovexattr, setattr,
fsetattr
** Format: META
* Type-II -- Directory Operation
** Includes: mknod, mkdir, symlink, rename, link,lk,
** Format: DIR []
** NEWGFID is NULL for deletes
** renames have two entries)
** For deletes, include vector clock with delete operation (note: This
is resulted to associate a vector clock with a propigated tombstone.

All entries should include GUID. This is used to determine the nature of
the change, for example self-heal, change from other GeoRep node ...

[[]]
Change Log Service
------------------

Operations on a subscription would include:

* subscribe() -= establish a subscription and create corresponding
sub-tree containing data for that subscription
* unsubscribe() -
* set_monitor() - configured events to be logged
* fetch_changes() - Returns log file with all accumulated changes for a
given subscriber

Subscriber requests for changes, is given a blob of changes (as per
format above). Now it becomes the subscribers headache to make sense of
it (backup utility replays the changes, geo-rep uses the last change per
gfid) notes:

In the case of GeoRep, we may want to consider the following
subdirectories: .changelog/.<subscriber>/current/ -- new log entries
.changelog/<subscriber>/logged_<timestamp>/ - backlog of files to be
processed .changelog/<subscriber>/deferred/
.changelog/<subscriber>/history/

General flow for geoRep: 1) Perform snap operation. Pending changes now
located in ./logged_/ directory 2) identify all deferred changes and
move into [.deferred] directory. May require update to timestamp for
entries that are already present in ./deferred/ Unless there is a
corresponding close entry, writes and open entries will typically move
into ./deferred/ directory. 3) Identify any entries in deferred that
have aged out, and move back into the pending directory ([.snap_]) 4)
Filtered operations with priv'ed GUIDs for special handling, as
appropriate 4) Perform GeoRep on all entries in pending directory, and
items are propagated, move from pending to ./history/

Some other considerations:

* On crash, all items in ./current/ and ./deferred/ into ./logged_/

We may want to create multiple history directories, by time period,
depending on duration and granularity of history

* In the case of AFR replication volumes, when an entry is retired and
moves from ./pending/ to history, it should also be added to the
[.history] for the other replicas. When a node completes self-heal, it
should make sure that it's history directory also includes entries
included all entries present in the other replicas.

[[]]
Error Recovery
--------------

Impact of glusterfsd crash on logged information:

* No loss of information since CacheLog design relies on filesystem to
ensure no loss of events (ie: directory inserts and renames are logged
by filesystem)

Impact of replica leaving and re-joining cluster, eityher as a result of
a node shutdown, node crash or split-brain:

* At time of brick restart, local brick change log may be missing
certain changes previous applied to other on-line) replicas
* Potential approaches to resolving situation:
** Alternative 1: Merge local change directories (current, pending,
history) with those of other replicas, applying updated to local
directories, as appropriate
*** Note: Certain local changes may have already moved to history in
remote directory.
** Alternative 2: Wait for replica to perform self-heal. As changes are
applied locally, corresponding entries will be inserted into changelog.
