Below are nome notes on possible leverage of Parallel GeoRep for A-A
GeoRep. These notes are very preliminary reflecting an early-state
discussion with Avati and will need to be updated to reflect Venky and
Csaba's current thinking.

Assumptions:

* Parallel GeoRep (leveraging x-sync concepts) will serve as the
foundation for A-A GeoRep
* Tombstones will be present as part of Parallel GeoRep
* Per-brick change longs will be present in Parallel GeoRep

A-A GeoRep operating model

* On a per-volume basis, each cluster is responsible for pushing it's
changes to other nodes subscribing to the data
** As with Parallel GeoRep, individual brick nodes propigate there
changes independently
* With the exception of conflicts, this is conceptually similar to
simultaneous master-slave replication, where each node is serves as the
master for it's own changes.
** For changes initiated on Cluster 1, Cluster 1 serves as master
(source) and Cluster 2 serves as slave (target)
** For changes initiated on Cluster 2, Cluster 2 serves as master
(source) and Cluster 1 serves as slave (target)
** Vector clocks are used to detection conflicts
** Target size is responsible for acceptance of changes, hence is
responsible for enforcement of conflict resolution.

A potential flow:

* Based on change log or x-find, processes on each brick identify
collections of changes that have undergone change since previous
replication.
* Candidate files are updated to include xattr with Global vector clock.
Vector clock includes a consistent x-time for file
* Files are transfered from Source node to Target node using either
optimized copy routine, either RSYNC, SSH/Tar or some other method
specified by user
** During copy operation, files are inserted onto Targe node using an
rsync-friendly provisional name, such as .name.source
* Upon completion of transfer, based on file list provided by source
node, (or information in change log), target side commits changes
subject to conflict resolution subject to policy
** For files
*** If source version of file is newer, then file is renamed (committed)
and older version is discarded.
*** If target version of file is newer, then local copy of source
version is deleted (discarded).
*** If unable to resolve, then file added to user conflict resolution
list
** For directories
*** if source version of tombstone is newer, then local file or
subdirectory is deleted
*** If vector-clock or x-time of local file/sub-directory is newer, then
tombstone is ignored
*** User conflict resolution called for other situation.

Questions and issues:

* How do we handle propagation of changes from Active node to read-only
slave node
** Recommendation: Capture commit (file rename in in change log)
* How do we handle non point-to-point A-A configurations where nodes
indirectly receive changes from other nodes?
* How to we handle sparse replicas?
