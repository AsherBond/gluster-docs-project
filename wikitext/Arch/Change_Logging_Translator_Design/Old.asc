}

THIS IS AN EARLIER VERSION OF THE PROPOSED CHANGE LOGGING TRANSLATOR
DESIGN. DUE TO COMPLEXITY RELATED TO ERROR HANDLING, WE ARE CURRENTLY
EXPLORING AN ALTERNATIVE APPROACH USING CONCEPTS FOUND IN THE INDEX
TRANSLATOR.

[[]]
Background
----------

The Change Detection Translator is intended to be a general mechanism to
identify and log changes made to an individual brick within a Gluster
volume. Logically the translator sits just above the POSIX translator.
Each each translator provides a brick-specific view, any application
consuming the translator output may need to aggregate logs in order to
yield an overall view of activities to any given volume

[[]]
Consumers
---------

The following use-cases are currently envisioned for the change
detection translator:

* Parallel GepRep and Active-Active GeoRep
* Bit Rot Detection
* User file change service (for example, use by backup utilities)

Other potential consumers of change detection service:

* Dedupe
* AFR Self-heal
* Ordered-Async Replication
* Overall maintenance of file or block-level checksums (such as DeDupe,
SMB3)
* Performance tools
* Trigger translator or inotify service.

[[]]
Design Principles
-----------------

A key design principle of the change detection translator is that is be
sufficiently fast with it can be enabled in the mainstream with minimal
overhead. Implications include:

* Should be a general mechanism, where the selection of logged operation
is handled at translator initialization/configuration time. The logging
translator should be generic, and not include any logic specific to an
individual use-case (GeoRep vs DeDupe ...)
** If is expected that there may be multiple log readers that my
subscribe to a log file, and that these log readers may include use-case
specific logic. These readers are expected to live outside the Gluster
Translator frame an my be implemented in Python, C or Java.
* Translator should impose negligible performance tax in the
steady-state for routine Gluster operations.
** This means avoidance of any form of transactional operation, such as
requiring a commit to a log file prior to any modification of the file
system. The burden is placed on the reader, rather than the logger, to
resolve situations where there may be concurrent access.
** This means that log inserts and log writes may occur in parallel, and
log file may contain certain artifacts at end of log resulting from
concurrent operations. The log file format provides aids to identify
these situations, however it is the responsibility of the log reader to
fileter out these artifacts.
* Change logging should impose minimal load on underlying block
filesystem and disk subsystem.
** Log writes should be sequential in nature, with a single log per
brick. It is important that log reads/writes should not result in
additional head-seeks where possible. Log writes should exploit RAID
controller write cache to minimize any RAID06 write penalty penalty.
** Log writes should be aggregated and written on a periodic basis to
maximize log write efficiency (such as a write every second). One
implication of this deferred logging is the potential for lost log
entries upon systen or glusterfsd crash. Alternative mechanisms will be
used to disambiguate such situations.
** Log writes should leverage the buffer cache. This means that log
reader processes executing in parallel with log writer will read recent
data from buffer cache instead of disk.

[[]]
Log Structure
-------------

The logger on-disk state consists of:

* a set of individual log files
* a catalog of log files (log of log)

[[]]
Individual Log Files
~~~~~~~~~~~~~~~~~~~~

The logger generates a collection of individual log files generally
identified as: `bricklog_&lt;brick&gt;_&lt;timestamp&gt;.log` located in
the `[.glusterfs.logs]` subdirectory for each brick.

As a general rule, then lifetime of an individual log file corresponds
to the lifetime of a glusterfsd server-side process.

* New log files are created during call to log translator `init` and are
closed during log translator `fini`.

Additional details:

* Upon call to translator `init`:
** New log file is created, with using current timestamp for name
** Name of new log file is appended to log catalog file
** A `log_open_new` entry is inserted in the new log file.
* Upon call to translator `fini`:
** A `log_close_fini` entry is inserted into the current log file
** The log file is flushed and closed.

When the glusterfsd process is alive for extended periods of time, which
is typical in the steady-state, the log file can grow beyond preferred
size, such as 2GB (actual value specified as a translator option). In
this case, a log-switch operation occurs:

* A log_close_swap entry is inserted in the existing log file
* A new log file is created using the current timestamp
* A log_open_swap entry is inserted in the new log file, where the
log_open_swap entry also include the name of the prior log file.

As an additional optimization, entries are inserted into buffers of up
to 1MB, such that no entries cross a 1MB boundary. This means that a new
entry will always be present at the 0byte offset of each 1MB region.

* Readers can exploit this characteristic to skip through a file to find
entries starting with an specific timestamp.

[[]]
Log Entries
~~~~~~~~~~~

[[]]
Generic Entry Format
^^^^^^^^^^^^^^^^^^^^

* Operation: Either log writer LOP or translator file FOP (0=invalid)
* Offset_Path: 0 if no path included
* Offset_FOP_Data: 0 if no FOP specific data
* Offset_Next_Entry: Location of next entry in log
* GFID: Gluster iNode
* GUID: Gluster User Identify associated with operation
* TIMESTAMP:
* CRC-16: Includes entire entry, from start of entry to
Offset_Next_Entry-1
* _file path_ if needed
* _FOP specific data_ if needed

Questions:

* What assumptions should we make regarding timestamp?
** Are timestamps always ascending?
** How to timestamps correspond to x-time
*** if different, should we also include xtime in entries?

Change History:

* Added GUID field: Need to be able to distinguish between operations
resulting from normal user behavior, GeoRep (such as data replicated
from other nodes) and other housekeeping operations (AFR self-heal, DHT
rebalance)

[[]]
Log Writer Specific Entries
^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following Log Writer OPS (LOPS) and corresponding entries are used
for Log Writer housekeeping:

* *log_entry_invalid* - default value (0) until buffer entry is written
* *log_open_new* - First entry in log file after startup
* *log_open_swap* - First entry in log file after swap, includes name of
prior log file
* *log_close_fini* - Last entry in log file as part of graceful shutdown
* *log_close_swap* - Last entry in log file, log entries continue to
another file.
* *Log_gap* - Indicates potential for lost entries, such as buffer
overflow, out of disk space or other condition
* *Log_resume*: Indicated that continuous logging restores as of current
timestamp.
* *Log_replica_non-member* - Indicates that replica may be in an
inconsistent state and may include either incomplete data or spurious
self-heal information
* *log_replica_member_restored* - Indicated that replica is restored to
a healed state and entries subsequent to restored timestamp accurately
reflect steady-state changes

[[]]
Gluster FOPS Logging and FOP Specific Data
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

[cols=",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,",options="header",]
|=======================================================================
|Gluster FOP |Support Initially |Include Path |FOP Specific Data
|Comment |+ |lookup |no |yes |[multiblock cell omitted] ||+ |stat |no
|no |[multiblock cell omitted] ||+ |fstat |no |no
|[multiblock cell omitted] ||+ |truncate |yes |yes |offset ||+
|ftruncate |yes |no |offset ||+ |access |no |no
|[multiblock cell omitted] ||+ |mknod |no |yes
|[multiblock cell omitted] ||+ |mkdir |yes |yes
|[multiblock cell omitted] ||+ |rmdir |yes |yes
|[multiblock cell omitted] ||+ |symlink |yes |yes
|[multiblock cell omitted] ||+ |rename |yes |yes |include source and
dest paths |may also be used for a-a georep commit ops |+ |link |yes
|yes |[multiblock cell omitted] ||+ |create |yes |yes
|[multiblock cell omitted] ||+ |open |yes |yes |mode (r/w, append) |only
log open for write |+ |writev |yes |no |[multiblock cell omitted] ||+
|flush |no |no |[multiblock cell omitted] ||+ |fsync |no |no
|[multiblock cell omitted] ||+ |opendir |no |no
|[multiblock cell omitted] ||+ |readdir |no |no
|[multiblock cell omitted] ||+ |readdirp |no |no
|[multiblock cell omitted] ||+ |fsyncdir |no |no
|[multiblock cell omitted] ||+ |statfs |no |no
|[multiblock cell omitted] |[multiblock cell omitted] ||+ |setxattr |yes
|yes |name of xattr |filtered on xattr class |+ |getxattr |no |no
|[multiblock cell omitted] ||+ |fsetxattr |yes |no |name of xattr
|filtered on xattr class |+ |fgetxattr |no |no ||+ |removexattr |yes
|yes |name of xattr |filtered on xattr class |+ |fremovexattr |yes |no
|name of xattr |filtered on xattr class |+ |lk |no |no
|[multiblock cell omitted] ||+ |inodelk |no |no
|[multiblock cell omitted] ||+ |finodelk |no |no
|[multiblock cell omitted] ||+ |entrylk |no |no
|[multiblock cell omitted] ||+ |fentrylk |no |no
|[multiblock cell omitted] ||+ |rchecksum |no |no
|[multiblock cell omitted] ||+ |xattrop |? |no
|[multiblock cell omitted] ||+ |fxattrop |? |no
|[multiblock cell omitted] ||+ |setattr |? |yes
|[multiblock cell omitted] ||+ |fsetattr |? |no
|[multiblock cell omitted] ||+ |getspec |no |no
|[multiblock cell omitted] |[multiblock cell omitted]
|=======================================================================

[[]]
Log Buffer and Log Writer
-------------------------

The conceptual model is one of an in-memory log buffer of some
power-of-two size (e.g.: 1MB). The buffer is initialized to zero, so
unallocated space at the end of the buffer is easily identified.

Rules for accessing the buffer:

* All insertions of data into the buffer are handled under protection of
a write lock, and all insertions happen sequentially.
* Reading of buffer data by the writer thread are handled asynchronously
and is not protected by a lock.

Associated with the buffer are 2 pointers:

* Free_Pointer: Points to first byte of unallocated space at the end of
the buffer.
* Dirty_pointer: Points to first byte of buffer yet written to disk.

General behavior:

* Insertion threads insert entries at the end of the buffer, one entry
at a time, under protection of a write lock. Entry insertion begins at
location pointed to by Free_Pointer. After Entry is inserted into
buffer, Free-Pointer is updated go reflect new unallocated
end_of_buffer.
* Data between the Dirty_Pointer and Free_Pointer is considered to be
pending. Once write is queued, Dirty_Pointer is updated by writer
process (not: Only writer process is allowed to updated Dirty_Pointer).

Log writer process:

* The log writer thread thread wakes-up on a periodic basis to determine
whether there is data pending write to disk. Data is written to disk if
either:
** Buffer end crosses some preferred block boundary, making it efficient
to write the buffer region to disk
** Data has aged a sufficient time in a pending pending (dirty) that it
is deemed necessary to flushed to disk.
* In order to optimize write performance, the writer processes is
allowed to extend the write-region to a power-of-two boundary to align
with the filesystem block size (e.g.: 2K/4K/8K). Implications of this
optimization
** It is possible to re-write clean-up in order to pad buffer size.
Happens when start of block is clean, but end of block is dirty.
** If is possible to write some, but not all, of an entry. This happens
when an entry crosses a block boundary.
** It is possible to write data within the free region at the end of the
buffer, including wip entry insertion. This happens when pending data is
writtend due to age, but the written block only contain only partially
dirty data.
** It is the responsibility of the log reader processes to identify and
ignore partially complete entries at end-of-file. The entry format,
including entry CRC, and be used to determine whether an entry is
complete or if it was a wip entry written before entry insertion is
complete.

Question:

* What is the right balance between aggressive vs lazy log writer
behavior.
* What is the relative roles of the log writer and buffer cache to
manage block alignment.

[[]]
Log Readers
-----------

[[]]
Error Recovery
--------------

In the event of a glusterfsd or system crash, the log file may contain
partial results:

* If another Replica has a valid log, the Change Log readers should use
this information. Log reader may switch back to local reader once proper
operation restored.
* If no valid replica, x-time, marker framework and x-find may be used
to detect changes relative to a given point in time.

[[]]
Issues
------

* How do we handle Garbage Collection of old log files
* what is the relationship between timestamp in file and the
corresponding x-time for an operation.
** Would like to make sure that entries are inserted in ascending order.
** Since file x-time may be independently generated, there is the
potential for some skew between x-time and timestamp such there there
may be re-ordering within a narrow window of clock skew
* How should we handled Replica membership, Outcast, self-heal and
rebalance?
** How should information be interpreted by log readers?
** How can we detect and log replica state in the log?
*** Potential Resolution: Added GUID field to log entry. Guid can be
used to distinguish between regular gluster operations and operations
related to SFR self-heal, DHT rebalance and GeoRep
* How should we handle
